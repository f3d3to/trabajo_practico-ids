services:
  backend:
    build:
      context: ..
      dockerfile: deploy/backend.Dockerfile
    container_name: backend
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - ../backend:/app
    command: flask --app app_back.py --debug run --host=0.0.0.0 --port=5000
    depends_on:
      - db

  frontend:
    build:
      context: ..
      dockerfile: deploy/frontend.Dockerfile
    container_name: frontend
    environment:
      - BACKEND_URL=http://backend:${BACKEND_PORT}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    volumes:
      - ../frontend:/app
    command: flask --app app_front.py --debug run --host=0.0.0.0 --port=5001
    depends_on:
      - backend

  db:
    image: mysql:latest
    container_name: db
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # actua como script inicial de mysql.
      - ./my.cnf:/etc/mysql/conf.d/my.cnf # Monta el archivo my.cnf

volumes:
  mysql_data:
